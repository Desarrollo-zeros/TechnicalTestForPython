name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "VERSION_API=${{ secrets.VERSION_API }}" >> .env
        echo "DATA_DIRECTORY=${{ secrets.DATA_DIRECTORY }}" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
        echo "DESCRIPTION=${{ secrets.DESCRIPTION }}" >> .env
        echo "MAX_SIZE_CACHE=${{ secrets.MAX_SIZE_CACHE }}" >> .env
        echo "TTL_CACHE=${{ secrets.TTL_CACHE }}" >> .env
        echo "URL_DATA_EXAMPLE=${{ secrets.URL_DATA_EXAMPLE }}" >> .env
        echo "SERVICE_ACCOUNT_KEY=${{ secrets.SERVICE_ACCOUNT_KEY }}" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "FIREBASE_TYPE=${{ secrets.FIREBASE_TYPE }}" >> .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> .env
        echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> .env
        echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> .env
        echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> .env
        echo "FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }}" >> .env
        echo "FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }}" >> .env
        echo "FIREBASE_AUTH_PROVIDER_X509_CERT_URL=${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}" >> .env
        echo "FIREBASE_CLIENT_X509_CERT_URL=${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}" >> .env
        echo "FIREBASE_UNIVERSE_DOMAIN=${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}" >> .env
        echo "URL_HEALTH=${{ secrets.URL_HEALTH }}" >> .env

    - name: Run tests
      env:
        VERSION_API: ${{ secrets.VERSION_API }}
        DATA_DIRECTORY: ${{ secrets.DATA_DIRECTORY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        DESCRIPTION: ${{ secrets.DESCRIPTION }}
        MAX_SIZE_CACHE: ${{ secrets.MAX_SIZE_CACHE }}
        TTL_CACHE: ${{ secrets.TTL_CACHE }}
        URL_DATA_EXAMPLE: ${{ secrets.URL_DATA_EXAMPLE }}
        SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FIREBASE_TYPE: ${{ secrets.FIREBASE_TYPE }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
        FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
        FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
        FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}
        FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
        FIREBASE_UNIVERSE_DOMAIN: ${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}
        URL_HEALTH: ${{ secrets.URL_HEALTH }}
      run: |
        python -m unittest discover -s tests -p "*.py"

    - name: Format code
      run: |
        pip install autopep8
        autopep8 --in-place --aggressive --aggressive -r app/

    - name: Lint code
      run: |
        pip install flake8
        flake8 app --exit-zero

    - name: Build Docker image
      run: |
        docker build -t myapp:latest .

    - name: Deploy to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        USER_VPS: ${{ secrets.USER_VPS }}
        IP_VPS: ${{ secrets.IP_VPS }}
      run: |
        echo "$SSH_PRIVATE_KEY" > id_rsa
        chmod 600 id_rsa
        rsync -avz --exclude='.git*' --exclude='.github*' -e "ssh -i id_rsa -o StrictHostKeyChecking=no" . $USER_VPS@$IP_VPS:/var/www/myapp
        ssh -i id_rsa -o StrictHostKeyChecking=no $USER_VPS@$IP_VPS << 'EOF'
          cp -r /var/www/data /var/www/myapp
          cd /var/www/myapp
          docker-compose down
          docker-compose up -d --build
        EOF

    - name: Health check
      run: |
        python health_check.py

    - name: Check Docker status
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        USER_VPS: ${{ secrets.USER_VPS }}
        IP_VPS: ${{ secrets.IP_VPS }}
      run: |
        echo "$SSH_PRIVATE_KEY" > id_rsa
        chmod 600 id_rsa
        ssh -i id_rsa -o StrictHostKeyChecking=no $USER_VPS@$IP_VPS << 'EOF'
          docker ps -f "name=fastapi_app"
          docker stats fastapi_app --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
          docker logs fastapi_app
        EOF
